/**
 * Global structure settings
 *
 * @package df19
 * @author danfoy (danfoy.com)
 * @since 1.0.0
 */


$em_base: 1.7rem;
/**
 * Custom rem unit
 *
 * Provides a pseudo-rem element equal to 1em on the body element. This is
 * allows usage of '1rem' to indicate 10px, and 'gutter()' for 1 * $em_base.
 *
 * Absolute pixel values don't scale well for accessibility, and can cause
 * issues with legacy HiDPI devices.
 *
 * @param  int $size:1  Desired 'body em' multiplier
 * @return string       Adjusted rem unit
 */
@function gutter( $size:1 ) {
    @return ($size * $em_base);
}
/**
 * Global em reset
 *
 * Resets the 'rem' unit to 10px for convinence.
 */
html {
    font-size: 62.5%;
}
// Set body em size to $em_base in _variables.scss
body {
    font-size: gutter(1);
}


/**
 * Clearfix Mixin
 *
 * I don't use clearfix much, but when it's absolutely necessary I still don't
 * want to pollute my classes with .clearfix. So, use this mixin instead.
 */
@mixin clearfix() {
    &:after {
    content: "";
    display: table;
    clear: both;
    }
}

/**
 * Hide-Visually Mixin
 *
 * Using `display: none;` on elements hides them from screenreaders and other
 * accessibility tools. Using this technique means they are invisible and
 * removed from the document flow, but are still accessible.
 *
 * https://webaim.org/techniques/css/invisiblecontent/#techniques
 *
 */
@mixin hide-visually() {
    position:absolute;
    left:-10000px;
    top:auto;
    width:1px;
    height:1px;
    overflow:hidden;
}


/**
 * WordPress WYSIWYG Editor alignment styles
 */
.alignleft {
    float: left;
    margin: 0 gutter(1) gutter(1) gutter(1);
}
.alignright {
    float: right;
    margin: 0 gutter(1) gutter(1) gutter(1);
}
.aligncenter {
    display: block;
    margin: 0 auto gutter(1) auto;
}


/**
 * Post styles
 */



.post-header {
    padding: 0 gutter(1); // Line up padding with paragraph tags
}

.post-content {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p,
    ul,
    ol,
    figcaption,
    aside,
    pre {
        padding: 0 gutter(1); // Keep text content from container edges
    }

    hr {
        margin: 0 gutter(1);
    }

    // Margins and paddings for lists
    ol,
    ul {
        margin-left: gutter(1); // Lists need a gutter for list-item to line up
        margin-top: gutter(0.5);

        // Breathing room between list-style type
        li {
            padding: 0 gutter(0.5);

            ul,
            ol,
            li {
                padding-right: 0; // Nested lists should still go to right edge
            }
        }
    }
}
